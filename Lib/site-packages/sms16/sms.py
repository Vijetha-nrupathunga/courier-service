import os
import requests
import json
import hashlib
import urllib.parse
import re


class Sms:
    _sms16_base_url = 'https://new.sms16.ru/get/'
    _timestamp = None
    _params = {}

    def _set_params(self, **options):
        """This method generates query parameters."""

        result = []
        self._ts()
        self._params = {
            'timestamp': self._timestamp,
            'login': os.environ['SMS16_LOGIN'],
            'return': 'json'
        }

        if options is not None:
            for k in options:
                if k == 'phone':
                    self._params[k] = re.sub(r'[^0-9.]+', r'', options[k])
                elif k == 'state':
                    self._params[k] = ','.join(options[k])
                else:
                    self._params[k] = options[k]

        for k, v in sorted(self._params.items(), key=lambda key: key):
            result.append(v)

        result.append(os.environ['SMS16_API_KEY'])
        md5hash = hashlib.md5(''.join(result).encode('utf-8'))
        self._params['signature'] = md5hash.hexdigest()

    def _ts(self):
        """This method updates the timestamp parameter."""

        r = requests.get(self._sms16_base_url + 'timestamp.php')
        ts = r.content
        self._timestamp = ts.decode('utf-8')

    def _request(self, method):
        r = requests.get(self._sms16_base_url + method + '.php?' + urllib.parse.urlencode(self._params))
        content = json.loads(r.content)
        return content

    def balance(self):
        """This method queries and returns the current account balance."""

        self._set_params()
        return self._request(method='balance')

    def send(self, phone, text):
        """This method sends an SMS message and returns a JSON object with the result."""

        self._set_params(phone=phone, text=text, sender=os.environ['SMS16_SENDER_NAME'])
        return self._request(method='send')

    def status(self, ids):
        """The method requests statuses by one or more identifiers of SMS messages and returns the result."""

        if isinstance(ids, list):
            if len(ids) > 0:
                self._set_params(state=ids)
                return self._request(method='status')
            else:
                raise TypeError("Empty list")
        else:
            raise TypeError("ids Must be a list")
